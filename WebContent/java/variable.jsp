<h5><b><b>What is variable?</b></b></h5>
<p>Variable have consist some Specific size of memory. which is provide by JVM in java</p> 

<h5><b>3 Type of Variable in java</b></h5>
	<ul class="list-group">
		<li>Local Variable</li>
		<li>Instance Variable</li>
		<li>Static Variable</li>
	</ul>
	<%
	String name=request.getContextPath();
	System.out.println("variable:::"+name);
	%>
<h5><b>What is Local variable?</b></h5>
<p>If we define a variable within method or constructor or block it is call Local Variable.</p>
	<ul class="list-group">
		<li>Local Variable scope within method or constructor or block</li>
		<li>Local variable default value not provide by JVM</li>
		<li>Local Variable allocat a memory when method or constructor or block called.</li>
		<li>Local Variable Store a memory in Stack area</li>
	</ul>
	<ol type="i">	
		<li>The term "instance variable" is another name for<strong> non-static field</strong>.</li>
		<li>The term "class variable" is another name for<strong> static field</strong>.</li>
		<li>A local variable stores temporary state; it is declared inside a<strong> method.</strong></li>
		<li>A variable declared within the opening and closing parenthesis of a method is called a <strong>parameter</strong>.</li>
		<li>What are the eight primitive data types supported by the Java programming language?<strong> byte, short, int, long, float, double, boolean, char</strong></li>
		<li>Character strings are represented by the class<strong> java.lang.String</strong>.</li>
		<li>An <strong>array</strong> is a container object that holds a fixed number of values of a single type.</li>
	</ol>
<!-----------table statr-------------->
<table class="table">
		<tr >
			<th>Property</th>
			<th>Local Variable</th>
			<th>Instance Variable</th>
			<th>Static Variable</th>
		</tr>
		
		<tr class="success">
			<td>Where Declare</td>
			<td>inside method</td>
			<td>inside class and outside method</td>
			<td>inside class and outside method with static keyword</td>
		</tr>
		
		<tr class="success">
			<td>Default value</td>
			<td>default value not generated by JVM </td>
			<td>default value will be generated by JVM</td>
			<td>default value will be generated by JVM</td>
		</tr>
		<tr class="success">
			<td>Scope of variable</td>
			<td>Within method</td>
			<td>With in class</td>
			<td>with in class </td>
		</tr>
		<tr class="success">
			<td>When memory Allocated</td>
			<td>when method call</td>
			<td>when object create</td>
			<td>when .class file loaded</td>
		</tr>
		<tr class="success">
			<td>How to access</td>
			<td>only variable name</td>
			<td>using object name </td>
			<td>direct or with class name or using object</td>
		</tr>
		<tr class="success">
			<td>Store Memory</td>
			<td>Stack</td>
			<td>Heap area</td>
			<td>Non-Heap area</td>
		</tr>
		
</table>	
<!-- --------------------------table end ----------------------- -->	
	
	
<h5><b>Example of Local Variable</b></h5>	
	<pre id="codepre">
	package com.app.variable;
	public class Local {
		public static void main(String[] args) {
			//int a; It will generate compile time error: 
			The local variable a may not have been initialized
			
			int a=10;//local variable
			
			/*
			 * if  you don't initialized the local Variable that time 
			 * "The local variable a may not have been initialized" this 
			 * Error will show .so that if we are define the local Variable 
			 * that time  it should compluser to initialized  value of local Variable
			 */
			 System.out.println("Local variable default value not provide by JVM:"+a);
	}

}
</pre>
<pre id="outputpre">
out Put:
Local variable default value not provide by JVM:10
</pre>


<h5><b>What is Instance Variable?</b></h5>
<p>outside the method or constructor or block and in side the class that Variable is call Instance Variable</p>
 <ul>
 	<ol>instance variable scope with in class all method or constructor or block</ol>
 	<ol>instance variable memory allocate when object is created and When object distroyed memory will be distroyed </ol>
 	<ol>Instance variable memory allocate in heap area or heap memory</ol>
 </ul>

<h5><b>Example of Instance Variable</b></h5>
 <pre id="codepre">
 package com.app.variable;

public class InsatanceVariable {
	
	int a;//Instance Variable 
	
	public static void main(String[] args)
	{	
		//System.out.println(a); It will generate compile time error: 
		//Cannot make a static reference to the non-static field a
		
		/*
		 * Instance Variable We will not use directly.
		 * because Instance variable access by the object in java
		 * so that we will create a object of  class (InsatanceVariable).
		 * 
		 */
		InsatanceVariable iv=new InsatanceVariable();
		System.out.println("Instance Variable  default value initialized by JVM:"+iv.a);
	
	}

}
</pre> 
 <pre id="outputpre">
 Output:
 Instance Variable  default value initialized by JVM:0
</pre> 
 
 <h5><b>What is static Variable?</b></h5>
 <p>static variable declare inside the class but outside method or constructor or block with static modifier</p>
 	<ul>
 		<ol>static variable scope with in class all method or constructor or block </ol>
 		<ol>static variable memory allocate when dot class(.class_name) file loaded when class unloaded memory well distoryed</ol>
 		<ol>static variable memory allocate non-heap area or non-heap memory</ol>
 	</ul>
<h5><b>Example of Static Variable</b></h5> 
<pre id="codepre">
package com.app.variable.Static;

public class StaticVariable {
		
	static int a;
		
	public static void main(String[] args) {
		
		System.out.println
		("Static Variable  default value initialized by JVM:"+a);
		/*static variable  access by variable name directly.*/
		
					 //or
		
		System.out.println
		("Static Variable  default value initialized by JVM:"+StaticVariable.a);
		/*static variable  access by class name with dot and variable name.*/
					
					//or
				
		StaticVariable sv=new StaticVariable();
		System.out.println
		("Static Variable  default value initialized by JVM:"+sv.a);
		/* static variable access by object with dot and variable name*/
		
		

	}

}
</pre>
<pre id="outputpre">
Output:
Static Variable  default value initialized by JVM:0
Static Variable  default value initialized by JVM:0
Static Variable  default value initialized by JVM:0
</pre> 
